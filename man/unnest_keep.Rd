% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_columns.R
\name{unnest_keep}
\alias{unnest_keep}
\title{Unnest a list-column with preservation of empty lists}
\usage{
unnest_keep(
  data,
  cols,
  keep_empty = TRUE,
  ptype = NULL,
  names_sep = NULL,
  names_repair = "check_unique"
)
}
\arguments{
\item{data}{A data frame with a list-column to unnest.}

\item{cols}{Columns to unnest, if not specified, it defaults to all list-columns.}

\item{keep_empty}{A logical indicating whether to keep rows with empty lists.
Defaults to TRUE.}

\item{ptype}{An optional prototype used to control the output type.}

\item{names_sep}{If non-NULL, the names of the new columns are generated by combining the name of the
original column, and the names of the elements of the nested data frames with the specified
separator.}

\item{names_repair}{What happens if the output has non-unique names? Options are "minimal", "unique",
"universal", and "check_unique". Default is "check_unique".}
}
\value{
A tibble with the list-column unnested.
}
\description{
This function is a wrapper around \code{tidyr::unnest()}. It defaults to keeping rows with empty lists,
which can be crucial for maintaining data integrity and avoiding accidental data loss. This wrapper
excludes deprecated parameters.
}
\examples{
\dontrun{
df <- tibble(x = 1:3, y = list(1:2, integer(0), 3:5))
unnest_keep(df, y)
}
}
