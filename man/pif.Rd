% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe_if.R
\name{pif}
\alias{pif}
\alias{\%pif\%}
\title{Conditionally apply a transformation to a pipeline}
\usage{
pif(lhs, rhs, ...)

lhs \%pif\% rhs
}
\arguments{
\item{lhs}{A data frame or tibble (typically from a pipeline).}

\item{rhs}{A formula of the form \code{condition ~ transformation}.}

\item{...}{Additional arguments to be passed to the transformation function
when the RHS is a bare function.}
}
\value{
The transformed \code{lhs} if the condition is \code{TRUE}, otherwise \code{lhs} unchanged.

The transformed \code{lhs} if the condition is \code{TRUE}, otherwise \code{lhs} unchanged.
}
\description{
This function conditionally applies a transformation to a data frame or tibble.
The transformation is only applied if the provided condition evaluates to \code{TRUE}.
The right-hand side of the formula (\code{condition ~ transformation}) can be either:
\itemize{
\item a full expression (e.g., \code{mutate(., new_col = x + 1)})
\item a bare function (e.g., \code{mutate}) with additional arguments supplied via \code{...}
}

This infix operator applies a transformation to a data frame conditionally, using
a formula of the form \code{condition ~ transformation}. It is designed for use inside
\verb{\%>\%} pipelines.
}
\details{
This function supports both styles. For use in pipelines, a corresponding infix
operator \verb{\%pif\%} is provided, but due to R's parsing limitations, it cannot be
used with trailing \code{...} arguments. In those cases, use the \code{pif()} function form.

Note: Due to R's parsing rules, this operator \strong{cannot be used} with additional
arguments (\code{...}) after the formula. If additional arguments are needed, use
the regular function form \code{pif()} instead.
}
\examples{
\dontrun{
  library(dplyr)

  condition <- TRUE

  tibble(x = 1:3) \%>\%
    pif(condition ~ mutate(., y = x * 2))

  tibble(x = 1:3) \%>\%
    pif(condition ~ mutate, y = x * 2)
}

}
\seealso{
\code{\link[=pif]{pif()}} for a function version that supports additional arguments.
}
