% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clipboard.R
\name{paste_it}
\alias{paste_it}
\title{Read Data Frame from Clipboard}
\usage{
paste_it(header = TRUE, header_names = NULL)
}
\arguments{
\item{header}{Logical value indicating whether the clipboard data includes a header row. Defaults to \code{TRUE}.}

\item{header_names}{Optional character vector specifying custom column names. If provided, the length must match the number of columns in the data.}
}
\value{
A tibble containing the clipboard data.
}
\description{
This function reads data from the clipboard and returns a tibble. It can handle data with or without a header row and allows you to specify custom column names.
}
\details{
The \code{paste_it} function reads tab-separated values from the clipboard using \code{readr::read_tsv()} and returns a tibble. The function ensures that:
\itemize{
\item Leading and trailing whitespace in data fields is preserved (\code{trim_ws = FALSE}).
\item No characters are treated as quoting characters (\code{quote = ""}), which prevents issues with quotes and apostrophes in the data.
\item Column names are not altered (\code{name_repair = "minimal"}), preserving spaces and special characters.
}
If \code{header} is \code{TRUE}, the first row of the clipboard data is used as column names. If \code{header_names} is provided, these names replace the existing column names.
}
\examples{
\dontrun{
# Example 1: Reading data with a header row
# Copy data from Excel with a header row to the clipboard, then run:
df <- paste_it()

# Example 2: Reading data without a header row and specifying custom column names
df <- paste_it(header = FALSE, header_names = c("Column1", "Column2", "Column3"))

# Example 3: Reading data with a header row and replacing column names
df <- paste_it(header = TRUE, header_names = c("NewName1", "NewName2", "NewName3"))
}

}
